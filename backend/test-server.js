const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';
let authToken = null;
let testUserId = null;
let testHabitoId = null;
let testConquistaId = null;

// Configurar axios para mostrar erros detalhados
axios.interceptors.response.use(
  response => response,
  error => {
    if (error.response) {
      console.error(`‚ùå ${error.config.method?.toUpperCase()} ${error.config.url} - ${error.response.status}:`, error.response.data);
    } else if (error.request) {
      console.error('‚ùå Erro de conex√£o:', error.message);
    } else {
      console.error('‚ùå Erro:', error.message);
    }
    return Promise.reject(error);
  }
);

// Fun√ß√£o para aguardar o servidor estar dispon√≠vel
async function aguardarServidor() {
  console.log('üîç Aguardando servidor estar dispon√≠vel...');
  
  for (let i = 0; i < 30; i++) {
    try {
      const response = await axios.get(`${BASE_URL}/saude`);
      if (response.status === 200) {
        console.log('‚úÖ Servidor est√° rodando!');
        return true;
      }
    } catch (erro) {
      // Servidor ainda n√£o est√° pronto
    }
    
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  throw new Error('Servidor n√£o respondeu ap√≥s 30 segundos');
}

// Testar autentica√ß√£o
async function testarAutenticacao() {
  console.log('üîê Testando autentica√ß√£o...');
  
  // Registrar usu√°rio com nome mais curto
  const timestamp = Date.now().toString().slice(-6); // Apenas os √∫ltimos 6 d√≠gitos
  const nomeUsuario = `teste_${timestamp}`;
  const email = `teste_${timestamp}@librarium.com`;
  
  const registro = await axios.post(`${BASE_URL}/auth/registrar`, {
    nomeUsuario,
    email,
    senha: '123456'
  });
  
  testUserId = registro.data.usuario.id;
  console.log('‚úÖ Usu√°rio registrado:', registro.data.usuario.nomeUsuario);
  
  // Fazer login
  const login = await axios.post(`${BASE_URL}/auth/login`, {
    email,
    senha: '123456'
  });
  
  authToken = login.data.token;
  console.log('‚úÖ Login realizado com sucesso');
  
  // Verificar token
  const verificar = await axios.get(`${BASE_URL}/auth/verificar`, {
    headers: { Authorization: `Bearer ${authToken}` }
  });
  
  console.log('‚úÖ Token verificado com sucesso');
}

// Testar h√°bitos
async function testarHabitos() {
  console.log('\n‚öîÔ∏è Testando h√°bitos...');
  
  // Criar h√°bito
  const criarHabito = await axios.post(`${BASE_URL}/habitos`, {
    titulo: 'Exercitar-se diariamente',
    descricao: '30 minutos de exerc√≠cio f√≠sico',
    frequencia: 'diario',
    categoria: 'saude',
    dificuldade: 'medio',
    icone: 'espada',
    cor: '#FF6B6B'
  }, {
    headers: { Authorization: `Bearer ${authToken}` }
  });
  
  testHabitoId = criarHabito.data.habito._id;
  console.log('‚úÖ H√°bito criado:', criarHabito.data.habito.titulo);
  
  // Listar h√°bitos
  const listarHabitos = await axios.get(`${BASE_URL}/habitos`, {
    headers: { Authorization: `Bearer ${authToken}` }
  });
  
  console.log('‚úÖ H√°bitos listados:', listarHabitos.data.habitos.length);
  
  // Concluir h√°bito
  const concluirHabito = await axios.post(`${BASE_URL}/habitos/${testHabitoId}/concluir`, {
    observacoes: 'Completei 30 minutos de corrida!'
  }, {
    headers: { Authorization: `Bearer ${authToken}` }
  });
  
  console.log('‚úÖ H√°bito conclu√≠do:', concluirHabito.data.experienciaGanha, 'XP ganho');
}

// Testar conquistas
async function testarConquistas() {
  console.log('\nüèÜ Testando conquistas...');
  
  // Verificar conquistas automaticamente
  const verificarConquistas = await axios.post(`${BASE_URL}/conquistas/verificar`, {}, {
    headers: { Authorization: `Bearer ${authToken}` }
  });
  
  console.log('‚úÖ Conquistas verificadas:', verificarConquistas.data.conquistasDesbloqueadas.length);
  
  // Listar conquistas
  const listarConquistas = await axios.get(`${BASE_URL}/conquistas`, {
    headers: { Authorization: `Bearer ${authToken}` }
  });
  
  console.log('‚úÖ Conquistas listadas:', listarConquistas.data.conquistas.length);
}

// Testar usu√°rios
async function testarUsuarios() {
  console.log('\nüë§ Testando usu√°rios...');
  
  // Dashboard
  const dashboard = await axios.get(`${BASE_URL}/usuarios/dashboard`, {
    headers: { Authorization: `Bearer ${authToken}` }
  });
  
  console.log('‚úÖ Dashboard carregado');
  
  // Estat√≠sticas
  const estatisticas = await axios.get(`${BASE_URL}/usuarios/estatisticas`, {
    headers: { Authorization: `Bearer ${authToken}` }
  });
  
  console.log('‚úÖ Estat√≠sticas carregadas');
}

// Testar estat√≠sticas
async function testarEstatisticas() {
  console.log('\nüìä Testando estat√≠sticas...');
  
  // Gr√°fico semanal
  const graficoSemanal = await axios.get(`${BASE_URL}/estatisticas/grafico-semanal`, {
    headers: { Authorization: `Bearer ${authToken}` }
  });
  
  console.log('‚úÖ Gr√°fico semanal gerado');
  
  // Estat√≠sticas por categoria
  const categorias = await axios.get(`${BASE_URL}/estatisticas/categorias`, {
    headers: { Authorization: `Bearer ${authToken}` }
  });
  
  console.log('‚úÖ Estat√≠sticas por categoria carregadas');
}

// Testar multiplayer
async function testarMultiplayer() {
  console.log('\n‚öîÔ∏è Testando multiplayer...');
  
  // Listar batalhas
  const batalhas = await axios.get(`${BASE_URL}/multiplayer/batalha`, {
    headers: { Authorization: `Bearer ${authToken}` }
  });
  
  console.log('‚úÖ Batalhas listadas:', batalhas.data.batalhas.length);
  
  // Listar desafios
  const desafios = await axios.get(`${BASE_URL}/multiplayer/desafio`, {
    headers: { Authorization: `Bearer ${authToken}` }
  });
  
  console.log('‚úÖ Desafios listados:', desafios.data.desafios.length);
}

// Testar integra√ß√µes
async function testarIntegracoes() {
  console.log('\nüîó Testando integra√ß√µes...');
  
  // Status das integra√ß√µes
  const status = await axios.get(`${BASE_URL}/integracao/status`, {
    headers: { Authorization: `Bearer ${authToken}` }
  });
  
  console.log('‚úÖ Status das integra√ß√µes obtido');
}

// Testar exporta√ß√£o/importa√ß√£o
async function testarExportacaoImportacao() {
  console.log('\nüì¶ Testando exporta√ß√£o/importa√ß√£o...');
  
  try {
    // Exportar dados JSON
    const exportarJSON = await axios.get(`${BASE_URL}/dados/exportar/json`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log('‚úÖ Dados exportados em JSON');
  } catch (erro) {
    console.log('‚ö†Ô∏è Exporta√ß√£o JSON falhou (funcionalidade em desenvolvimento)');
  }
  
  try {
    // Estat√≠sticas de exporta√ß√£o
    const estatisticas = await axios.get(`${BASE_URL}/dados/estatisticas`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log('‚úÖ Estat√≠sticas de exporta√ß√£o obtidas');
  } catch (erro) {
    console.log('‚ö†Ô∏è Estat√≠sticas de exporta√ß√£o falharam (funcionalidade em desenvolvimento)');
  }
}

// Testar loja
async function testarLoja() {
  console.log('\nüè™ Testando loja...');
  
  // Listar itens
  const itens = await axios.get(`${BASE_URL}/loja`, {
    headers: { Authorization: `Bearer ${authToken}` }
  });
  
  console.log('‚úÖ Itens da loja listados:', itens.data.itens.length);
}

// Fun√ß√£o principal de teste
async function testarAPI() {
  try {
    console.log('\nüöÄ Iniciando testes da API Librarium...\n');
    
    // Testar autentica√ß√£o
    await testarAutenticacao();
    
    // Testar h√°bitos
    await testarHabitos();
    
    // Testar conquistas
    await testarConquistas();
    
    // Testar usu√°rios
    await testarUsuarios();
    
    // Testar estat√≠sticas
    await testarEstatisticas();
    
    // Testar multiplayer
    await testarMultiplayer();
    
    // Testar integra√ß√µes
    await testarIntegracoes();
    
    // Testar exporta√ß√£o/importa√ß√£o
    await testarExportacaoImportacao();
    
    // Testar loja
    await testarLoja();
    
    console.log('\nüéâ Todos os testes foram executados com sucesso!');
    
  } catch (erro) {
    console.error('\nüí• Erro durante os testes:', erro.message);
    throw erro;
  }
}

// Fun√ß√£o principal
async function main() {
  try {
    // Aguardar servidor estar dispon√≠vel
    await aguardarServidor();
    
    // Executar testes
    await testarAPI();
    
    console.log('\nüéØ Testes conclu√≠dos com sucesso!');
    console.log('üìä Resumo: Todas as funcionalidades principais testadas');
    console.log('‚è∞ Finalizado em:', new Date().toLocaleString('pt-BR'));
    
  } catch (erro) {
    console.error('\nüí• Erro durante os testes:', erro.message);
    process.exit(1);
  }
}

// Executar testes
main();